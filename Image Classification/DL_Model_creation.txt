# Creating Deep Learning model used in ipython notebook with Class fucntionality.

import tensorflow as tf
from tensorflow.keras import layers, models

class MyModel(tf.keras.Model):
    def __init__(self, num_classes):
        super(MyModel, self).__init__()
        
        self.conv1 = layers.Conv2D(2, (5, 5), activation='relu', input_shape=(120, 120, 3), kernel_initializer='he_normal')
        self.maxpool1 = layers.MaxPooling2D((2, 2))
        self.conv2 = layers.Conv2D(4, (3, 3), strides=2, activation='relu', kernel_initializer='he_normal')
        self.maxpool2 = layers.MaxPooling2D((2, 2))
        self.conv3 = layers.Conv2D(8, (3, 3), activation='relu', kernel_initializer='he_normal')
        self.flatten = layers.Flatten()
        self.dense1 = layers.Dense(256, activation='relu', kernel_initializer='he_normal')
        self.dropout = layers.Dropout(0.1)
        self.dense2 = layers.Dense(num_classes, activation='softmax')
    
    def call(self, inputs):
        x = self.conv1(inputs)
        x = self.maxpool1(x)
        x = self.conv2(x)
        x = self.maxpool2(x)
        x = self.conv3(x)
        x = self.flatten(x)
        x = self.dense1(x)
        x = self.dropout(x)
        x = self.dense2(x)
        return x

# Create an instance of the model
num_classes = len(type_encode.classes_)  # Replace with the appropriate number of classes
model = MyModel(num_classes)

# Print the model summary
model.build((None, 120, 120, 3))
model.summary()
